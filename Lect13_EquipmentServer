using MyLibrary;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace EquipManager
{
    public partial class frmEquipManager : Form
    {
        public frmEquipManager()
        {
            InitializeComponent();
        }
        TcpListener listener = null;
        TcpClient tcp = null;

        Socket sock = null;     // Client-Server
        List<Socket> socks = new List<Socket>();
        
        Thread threadServer = null;
        Thread threadRead = null;

        delegate void cbAddText(string str);

        void AddText(string str)
        {
            if (tbMonitor.InvokeRequired)
            {
                cbAddText cb = new cbAddText(AddText);
                Invoke(cb, new object[] { str });
            }
            else tbMonitor.AppendText(str);
        }

        private void mnuStart_Click(object sender, EventArgs e)
        {
            // 포트 연결
            if (listener == null) listener = new TcpListener(int.Parse(tbServerPort.Text));
            else listener.Stop();   //일시 중지
            listener.Start();   // 연결 대기 시작

            if (threadServer != null) threadServer.Abort();
            threadServer = new Thread(ServerProcess);
            threadServer.Start();

            if (threadRead != null) threadRead.Abort();
            threadRead = new Thread(ReadProcess);
            threadRead.Start();

        }

        // 연결 받기
        void ServerProcess()
        {
            while (true)
            {
                if (listener.Pending()) //보류중인 연결 있으면
                {
                    Socket sockT = listener.AcceptSocket();  // 연결 승인(accept)
                    socks.Add(sockT);       // 소켓 리스트에 추가
                }
                Thread.Sleep(100);
            }
        }

        //vEquip에서 들어오는 데이터 읽기
        void ReadProcess()
        {
            while (true)
            {
                // 연결된 모든 소켓 돌면서 
                for(int i = 0; i < socks.Count; i++)
                {
                    Socket lsock = socks[i];
                    if (!isAlive(lsock)) continue;  // 연결 불가 소켓이면 다음 소켓 보기
                    if (lsock.Available > 0)        // 읽어올 데이터가 있으면
                    {
                        byte[] ba = new byte[lsock.Available];
                        lsock.Receive(ba);          // 데이터 받기
                        ReadProc(lsock, ba);        // 데이터 처리
                    }
                }
                Thread.Sleep(100);
            }
        }
        // 소켓이 연결된 상태인지 확인
        bool isAlive(Socket ss)
        {
            if (ss == null || !ss.Connected) return false;
            if (ss.Poll(10000, SelectMode.SelectRead)&&ss.Available==0) return false;
            try
            {
                ss.Send(new byte[1], 0, SocketFlags.OutOfBand);
            }
            catch
            {
                return false;
            }
            return true;
        }

        string conString = "";
        SqlConnection sqlConn = new SqlConnection();
        SqlCommand sqlCom = new SqlCommand();

        // 받은 데이터 처리
        // (1) 미리 지정한 크기에 맞게 해당 변수에 대입
        // (2) 받은 데이터 로그에 기록
        // (3) 받은 데이터 원격끝점 정보와 함께 텍스트박스(tbMonitor)에 출력
        // (4) 처리한 각 변수를 연결된 데이터베이스에 추가
        // 2021-04-22 오후 3:49:00:[02]00001000000000 113.1445894089358[03]
        void ReadProc(Socket ss,byte[] bArr)    
        {
            string str = Encoding.Default.GetString(bArr);

            //데이터마다 정해둔 크기만큼 쪼개서 각 데이터 추출
            string sCode = str.Substring(1, 5);     //시작 인덱스, 크기
            string sModel = str.Substring(6, 6);
            string sLine = str.Substring(12, 5);
            string sBatt = str.Substring(17, 5);
            string sState = str.Substring(22, 1);
            string sCount = str.Substring(23, 5);
            string sTemp = str.Substring(28, 4);
            string sHum = str.Substring(32, 4);
            string sWind = str.Substring(36, 4);
            string sOzon = str.Substring(40, 4);
            string sAir = str.Substring(44, 1);
            string sTotal = str.Substring(45, 4);
            
            mylib.WriteLog(str);
            //127.0.0.1> [02]0000100002000~~[03]
            AddText(ss.RemoteEndPoint.ToString() + "> ");
            AddText(str + "\r\n");

            // sql 작성- 데이터베이스에 튜플 삽입
            //getdate() - 현재 데이터베이스 시스템 타임스탬프를 데이터베이스 표준 시간대 오프셋 없이 datetime 값으로 반환
            string sql = $"insert into fStatus values('{sCode}','{sModel}','{sLine}','{sBatt}','{sState}'" +
                $",'{sCount}','{sTemp}','{sHum}','{sWind}','{sOzon}','{sAir}','{sTotal}','getdate()')";
            RunSql(sql);    // sql실행 

        }

        // nonquery sql 실행
        void RunSql(string str)
        {
            sqlCom.CommandText = str;
            //select 외 insert, delete, update, 처리
            sqlCom.ExecuteNonQuery();

        }

        iniFile ini = new iniFile(".\\EquipManager.ini");
        private void frmEquipManager_Load(object sender, EventArgs e)
        {
            tbServerPort.Text = ini.GetString("Server", "Port", "9000");

            int x1, x2, y1, y2;
            x1 = int.Parse(ini.GetString("Form", "LocationX", "0"));
            y1 = int.Parse(ini.GetString("Form", "LocationY", "0"));
            this.Location = new Point(x1, y1);

            x2 = int.Parse(ini.GetString("Form", "SizeX", "500"));
            y2 = int.Parse(ini.GetString("Form", "SizeY", "500"));
            this.Size = new Size(x2, y2);

            //이전에 마지막으로 연 페이지에서 시작하기
            tabControl1.SelectedIndex = int.Parse(ini.GetString("Form", "TabIndex", "0"));

            //데이터베이스의 연결문자열
            conString = ini.GetString("Database", "ConnectionString", @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\YeongjuNa\Documents\EquipmentDatabase.mdf;Integrated Security=True;Connect Timeout=30");
            
            // 데이터베이스 연결, 열기
            sqlConn.ConnectionString = conString;
            sqlConn.Open();
            sqlCom.Connection = sqlConn;
        }

        private void frmEquipManager_FormClosing(object sender, FormClosingEventArgs e)
        {
            ini.SetString("Server", "Port", tbServerPort.Text);
            ini.SetString("Form", "LocationX", $"{this.Location.X}");
            ini.SetString("Form", "LocationY", $"{this.Location.Y}");
            ini.SetString("Form", "SizeX", $"{this.Size.Width}");
            ini.SetString("Form", "SizeY", $"{this.Size.Height}");
            ini.SetString("Form", "TabIndex", $"{tabControl1.SelectedIndex}");
            ini.SetString("Database", "Connection String", conString);

            if (threadServer != null) threadServer.Abort();
            if (threadRead != null) threadRead.Abort();
            if (sock != null) sock.Close();

        }
    }

}
