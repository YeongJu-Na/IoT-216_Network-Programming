using MyLibrary;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace vEquip
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        iniFile ini = new iniFile(".\\vEquip.ini");

        private void Form1_Load(object sender, EventArgs e)
        {
            tbEqCode.Text = ini.GetString("Equipment", "EqCode", "00001");      // 5 string
            tbEqModel.Text = ini.GetString("Equipment", "EqModel", "000000");   // 6 string
            tbEqLine.Text = ini.GetString("Equipment", "EqLine", "00001");      // 5 string
            tbEqBatt.Text = ini.GetString("Equipment", "EqBatt", "00001");      // 5 float 
            tbEqState.Text = ini.GetString("Equipment", "EqState", "1");    // 1
            tbEqCount.Text = ini.GetString("Equipment", "EqCount", "00001");    // 5

            tbEqTemp.Text = ini.GetString("Environment", "EqTemp", "0001");    // 4
            tbEqHum.Text = ini.GetString("Environment", "EqHum", "0000");     // 4
            tbEqWind.Text = ini.GetString("Environment", "EqWind", "0001");    // 4
            tbEqOzon.Text = ini.GetString("Environment", "EqOzon", "0001");    // 4
            tbEqAir.Text = ini.GetString("Environment", "EqAir", "0");      // 1
            tbEqTotal.Text = ini.GetString("Environment", "EqTotal", "0001");  // 4

            tbInterval.Text = ini.GetString("Operation", "Interval", "5");

            DateTime dt = DateTime.Now; //현재 날짜
            dtStart.Value = new DateTime(long.Parse(ini.GetString("Operation", "StartDate",dt.Date.Ticks.ToString())));
            dtEnd.Value = new DateTime(long.Parse(ini.GetString("Operation", "EndDate", dt.Date.Ticks.ToString())));
            dtStartTime.Value = new DateTime(long.Parse(ini.GetString("Operation", "StartTime",dt.Date.Ticks.ToString())));
            dtEndTime.Value = new DateTime(long.Parse(ini.GetString("Operation", "EndTime",dt.Date.Ticks.ToString())));
            
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (threadRead != null) threadRead.Abort();
            if (sock != null) sock.Close();

            ini.SetString("Equipment", "EqCode",tbEqCode.Text);
            ini.SetString("Equipment", "EqModel", tbEqModel.Text);
            ini.SetString("Equipment", "EqLine", tbEqLine.Text);
            ini.SetString("Equipment", "EqBatt", tbEqBatt.Text);
            ini.SetString("Equipment", "EqState", tbEqState.Text);
            ini.SetString("Equipment", "EqCount", tbEqCount.Text);

            ini.SetString("Environment", "EqTemp", tbEqTemp.Text);
            ini.SetString("Environment", "EqHum", tbEqHum.Text);
            ini.SetString("Environment", "EqWind", tbEqWind.Text);
            ini.SetString("Environment", "EqOzon", tbEqOzon.Text);
            ini.SetString("Environment", "EqAir", tbEqAir.Text);
            ini.SetString("Environment", "EqTotal", tbEqTotal.Text);

            ini.SetString("Operation", "StartDate", dtStart.Value.Ticks.ToString());
            ini.SetString("Operation", "EndDate", dtEnd.Value.Ticks.ToString());
            ini.SetString("Operation", "StartTime", dtStartTime.Value.Ticks.ToString());
            ini.SetString("Operation", "EndTime", dtEndTime.Value.Ticks.ToString());
            ini.SetString("Operation", "Interval", tbInterval.Text);
        }

        Socket sock = null;
        Thread threadRead = null;

        delegate void cbAddText(string str);

        void AddText(string str)
        {
            if (tbMonitor.InvokeRequired)
            {
                cbAddText cb = new cbAddText(AddText);
                Invoke(cb, new object[] { str });
            }
            else tbMonitor.AppendText(str);
        }

        bool isAlive(Socket ss)
        {
            if (ss == null) return false;
            if (!ss.Connected) return false;
            if (ss.Poll(1000, SelectMode.SelectRead) && ss.Available == 0) return false;
            try
            {
                ss.Send(new byte[1], 0, SocketFlags.OutOfBand);
                return true;
            }
            catch { return false; }

            }

        void ReadProcess()
        {
            Socket lsock = sock;
            while (true)
            {
                lsock = sock;
                if (isAlive(lsock) && lsock.Available > 0)
                {
                    byte[] bArr = new byte[lsock.Available];
                    lsock.Receive(bArr);
                    AddText(Encoding.Default.GetString(bArr)+"\r\n");
                }
                Thread.Sleep(100);
            }

        }

        private void sbLabel1_DoubleClick(object sender, EventArgs e)
        {
        }

        //  tbEqCode.Text   : String : 5
        //  tbEqModel.Text  ; String : 6
        //  tbEqLine.Text   : String : 5
        //  tbEqBatt.Text   : float  : 5  1.11
        //  tbEqState.Text  : int    : 1
        //  tbEqCount.Text  : int    : 5      
        //  tbEqTemp.Text   : int    : 4      
        //  tbEqHum.Text    : int    : 4      
        //  tbEqWind.Text   : int    : 4      
        //  tbEqOzon.Text   : int    : 4      
        //  tbEqAir.Text    : int    : 1      
        //  tbEqTotal.Text  : int    : 4
        //  ===========================48

        char STX = '\u0002';
        char ETX = '\u0003';
        private void timer1_Tick(object sender, EventArgs e)
        {
            timer1.Stop();
            if (CheckInTime())
            {
                SetRandomValue();
                string str = STX+tbEqCode.Text.PadLeft(5, '0') + tbEqModel.Text.PadLeft(6, '0') + tbEqLine.Text.PadLeft(5, '0')
                    + tbEqBatt.Text.PadLeft(5, '0') + tbEqState.Text + tbEqCount.Text.PadLeft(5, '0')
                    + tbEqTemp.Text.PadLeft(4, '0') + tbEqHum.Text.PadLeft(4, '0') + tbEqWind.Text.PadLeft(4, '0')
                    + tbEqOzon.Text.PadLeft(4, '0') + tbEqAir.Text.PadLeft(1, '0') + tbEqTotal.Text.PadLeft(4, '0')+ETX;
                str += str.Length;
                //str.PadLeft(4,'0') - 문자열 길이 4중 남는 자리만큼 왼쪽부터 0 채우기
                //{int.Parse(tbEqTemp.Text):D4}

                byte[] bArr = Encoding.Default.GetBytes(str);
                if (isAlive(sock))
                {
                    sock.Send(bArr);
                    tbEqCount.Text = $"{int.Parse(tbEqCount.Text) + 1}";
                }

                // Package 구성: 패킷의 전후에 [02]STX [03]ETX 문자를 덧붙인다
                // send package: 모두 byte[]로 구성됨
            }
            timer1.Start();
            

        }
        void SetRandomValue()
        {
            Random r = new Random();
            //tbEqTemp.Text = $"{r.Next(-50, 50)}";     
            tbEqTemp.Text = $"{r.Next(0, 50)}";
            tbEqHum.Text = $"{r.Next(0, 99)}";
            tbEqWind.Text = $"{r.Next(0, 99)}";
            tbEqOzon.Text = $"{r.Next(0, 99)}";
        }

        // 현재 시간이 
        bool CheckInTime()
        {
            DateTime dt = DateTime.Now;
            DateTime st= dtStart.Value.Date + dtStartTime.Value.TimeOfDay;
            DateTime et = dtEnd.Value.Date + dtEndTime.Value.TimeOfDay;
            return dt > st && dt < et;
        }

        private void mnuStart_Click(object sender, EventArgs e)
        {
            if (sock != null) sock.Close();
            sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sock.Connect(sbLabel1.Text, int.Parse(sbLabel2.Text));

            if (threadRead != null) threadRead.Abort();
            threadRead = new Thread(ReadProcess);
            threadRead.IsBackground = true;
            threadRead.Start();

            try
            {
                //주기적으로 계속 인터럽트 생성
                timer1.Interval = int.Parse(tbInterval.Text) * 1000;
                timer1.Start();
            }
            catch (Exception e1)
            {
                MessageBox.Show(e1.Message);
            }
        }

        private void mnuStop_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            if(threadRead!=null) { threadRead.Abort(); threadRead = null; }
            if (sock != null) { sock.Close(); sock = null; }

        }
    }
}
